-- Create profiles table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  name varchar(255),
  avatar_url varchar(255),
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create sensors table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.sensors (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  name varchar(255) NOT NULL,
  device_id varchar(255) UNIQUE NOT NULL,
  status varchar(50) DEFAULT 'active',
  location varchar(255),
  latitude float,
  longitude float,
  last_reading float,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create readings table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.readings (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sensor_id bigint REFERENCES public.sensors(id) ON DELETE CASCADE NOT NULL,
  water_level float NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create reports table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.reports (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
  title varchar(255) NOT NULL,
  location varchar(255),
  description text,
  image_url varchar,
  status varchar(50) DEFAULT 'open',
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable Row Level Security if not already enabled
ALTER TABLE IF EXISTS public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.sensors ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.readings ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.reports ENABLE ROW LEVEL SECURITY;

-- Create policies (will not error if they already exist)
DO $$
BEGIN
  -- Profiles policies
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'profiles' AND policyname = 'Public profiles are viewable by everyone'
  ) THEN
    CREATE POLICY "Public profiles are viewable by everyone" ON public.profiles FOR SELECT USING (true);
  END IF;
  
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'profiles' AND policyname = 'Users can insert their own profile'
  ) THEN
    CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
  END IF;
  
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'profiles' AND policyname = 'Users can update own profile'
  ) THEN
    CREATE POLICY "Users can update own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);
  END IF;
  
  -- Sensors policies
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'sensors' AND policyname = 'Users can manage their own sensors'
  ) THEN
    CREATE POLICY "Users can manage their own sensors" ON public.sensors FOR ALL USING (auth.uid() = user_id);
  END IF;
  
  -- Readings policies
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'readings' AND policyname = 'Authenticated users can view readings'
  ) THEN
    CREATE POLICY "Authenticated users can view readings" ON public.readings FOR SELECT USING (auth.role() = 'authenticated');
  END IF;
  
  -- Reports policies
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'reports' AND policyname = 'Authenticated users can view reports'
  ) THEN
    CREATE POLICY "Authenticated users can view reports" ON public.reports FOR SELECT USING (auth.role() = 'authenticated');
  END IF;
  
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'reports' AND policyname = 'Users can create their own reports'
  ) THEN
    CREATE POLICY "Users can create their own reports" ON public.reports FOR INSERT WITH CHECK (auth.uid() = user_id);
  END IF;
  
  IF NOT EXISTS (
    SELECT FROM pg_policies WHERE tablename = 'reports' AND policyname = 'Users can update their own reports'
  ) THEN
    CREATE POLICY "Users can update their own reports" ON public.reports FOR UPDATE USING (auth.uid() = user_id);
  END IF;
END
$$;
