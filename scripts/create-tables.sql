-- Check if tables already exist before creating them
DO $$
BEGIN
    -- Create profiles table if it doesn't exist
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles') THEN
        CREATE TABLE public.profiles (
            id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
            name varchar(255),
            avatar_url varchar(255),
            updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
        );
        
        -- Enable Row Level Security
        ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
        
        -- Create policies
        CREATE POLICY "Public profiles are viewable by everyone." 
            ON public.profiles FOR SELECT 
            USING (true);
            
        CREATE POLICY "Users can insert their own profile." 
            ON public.profiles FOR INSERT 
            WITH CHECK (auth.uid() = id);
            
        CREATE POLICY "Users can update own profile." 
            ON public.profiles FOR UPDATE 
            USING (auth.uid() = id);
            
        RAISE NOTICE 'Created profiles table with RLS policies';
    END IF;

    -- Create sensors table if it doesn't exist
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'sensors') THEN
        CREATE TABLE public.sensors (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
            name varchar(255) NOT NULL,
            device_id varchar(255) UNIQUE NOT NULL,
            status varchar(50) DEFAULT 'active',
            location varchar(255),
            latitude float,
            longitude float,
            last_reading float,
            created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
            updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
        );
        
        -- Enable Row Level Security
        ALTER TABLE public.sensors ENABLE ROW LEVEL SECURITY;
        
        -- Create policies
        CREATE POLICY "Users can manage their own sensors." 
            ON public.sensors FOR ALL 
            USING (auth.uid() = user_id);
            
        RAISE NOTICE 'Created sensors table with RLS policies';
    END IF;

    -- Create readings table if it doesn't exist
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'readings') THEN
        CREATE TABLE public.readings (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            sensor_id bigint REFERENCES public.sensors(id) ON DELETE CASCADE NOT NULL,
            water_level float NOT NULL,
            created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
        );
        
        -- Enable Row Level Security
        ALTER TABLE public.readings ENABLE ROW LEVEL SECURITY;
        
        -- Create policies
        CREATE POLICY "Authenticated users can view readings." 
            ON public.readings FOR SELECT 
            USING (auth.role() = 'authenticated');
            
        RAISE NOTICE 'Created readings table with RLS policies';
    END IF;

    -- Create reports table if it doesn't exist
    IF NOT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'reports') THEN
        CREATE TABLE public.reports (
            id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
            title varchar(255) NOT NULL,
            location varchar(255),
            description text,
            image_url varchar,
            status varchar(50) DEFAULT 'open',
            created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
            updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
        );
        
        -- Enable Row Level Security
        ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;
        
        -- Create policies
        CREATE POLICY "Authenticated users can view reports." 
            ON public.reports FOR SELECT 
            USING (auth.role() = 'authenticated');
            
        CREATE POLICY "Users can create their own reports." 
            ON public.reports FOR INSERT 
            WITH CHECK (auth.uid() = user_id);
            
        CREATE POLICY "Users can update their own reports." 
            ON public.reports FOR UPDATE 
            USING (auth.uid() = user_id);
            
        RAISE NOTICE 'Created reports table with RLS policies';
    END IF;
END
$$;
